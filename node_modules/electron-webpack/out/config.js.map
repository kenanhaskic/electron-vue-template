{"version":3,"sources":["../src/config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEM,SAAU,kBAAV,CAA6B,UAA7B,EAA+C;AACnD,SAAO,KAAI,eAAJ,EAAS,MAAM,kCAAqB,0BAAS,IAAI,CAAC,IAAL,CAAU,UAAV,EAAsB,cAAtB,CAAT,CAArB,CAAf,CAAP;AACD;;AAOK,SAAU,6CAAV,GAAuD;AAC3D,SAAO,IAAI,CAAC,IAAL,CAAU,KAAV,EAAiB,QAAjB,CAAP;AACD;AAED;;;;;SAGsB,+B;;;;;;mEAAf,WAA+C,OAA/C,EAA4E;AACjF,UAAM,MAAM,SAAS,iCAAwC;AAC3D,MAAA,UAAU,EAAE,iBAD+C;AAE3D,MAAA,cAAc,EAAE,kBAF2C;AAG3D,MAAA,UAAU,EAAE,OAAO,CAAC,UAHuC;AAI3D,MAAA,eAAe,EAAE,OAAO,CAAC;AAJkC,KAAxC,CAArB;AAMA,UAAM,aAAa,GAAiC,MAAM,IAAI,IAAV,IAAkB,MAAM,CAAC,MAAP,IAAiB,IAAnC,GAA0C,EAA1C,GAA+C,MAAM,CAAC,MAA1G;;AACA,QAAI,aAAa,CAAC,qBAAd,IAAuC,IAA3C,EAAiD;AAC/C,MAAA,aAAa,CAAC,qBAAd,GAAsC,QAAtC;AACD;;AACD,QAAI,aAAa,CAAC,mBAAd,IAAqC,IAAzC,EAA+C;AAC7C,MAAA,aAAa,CAAC,mBAAd,GAAoC,MAApC;AACD;;AACD,QAAI,aAAa,CAAC,qBAAd,IAAuC,IAA3C,EAAiD;AAC/C,MAAA,aAAa,CAAC,qBAAd,GAAsC,6CAA6C,EAAnF;AACD;;AACD,IAAA,aAAa,CAAC,mBAAd,GAAoC,IAAI,CAAC,OAAL,CAAa,OAAO,CAAC,UAArB,EAAiC,aAAa,CAAC,mBAA/C,CAApC;AACA,IAAA,aAAa,CAAC,qBAAd,GAAsC,IAAI,CAAC,OAAL,CAAa,OAAO,CAAC,UAArB,EAAiC,aAAa,CAAC,qBAA/C,CAAtC;;AAEA,QAAI,aAAa,CAAC,QAAd,KAA2B,SAA/B,EAA0C;AACxC,MAAA,aAAa,CAAC,QAAd,GAAyB,EAAzB;AACD;;AACD,QAAI,aAAa,CAAC,IAAd,KAAuB,SAA3B,EAAsC;AACpC,MAAA,aAAa,CAAC,IAAd,GAAqB,EAArB;AACD;;AAED,QAAI,aAAa,CAAC,UAAd,IAA4B,IAAhC,EAAsC;AACpC,MAAA,aAAa,CAAC,UAAd,GAA2B,OAAO,CAAC,UAAnC;AACD;;AACD,WAAO,aAAP;AACD,G","sourcesContent":["import { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { getConfig } from \"read-config-file\"\nimport { ElectronWebpackConfiguration } from \"./core\"\nimport { orNullIfFileNotExist } from \"./util\"\n\nexport function getPackageMetadata(projectDir: string) {\n  return new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))\n}\n\nexport interface ConfigurationRequest {\n  projectDir: string\n  packageMetadata: Lazy<{ [key: string]: any } | null> | null\n}\n\nexport function getDefaultRelativeSystemDependentCommonSource(): string {\n  return path.join(\"src\", \"common\")\n}\n\n/**\n * Return configuration with resolved staticSourceDirectory / commonDistDirectory / commonSourceDirectory.\n */\nexport async function getElectronWebpackConfiguration(context: ConfigurationRequest): Promise<ElectronWebpackConfiguration> {\n  const result = await getConfig<ElectronWebpackConfiguration>({\n    packageKey: \"electronWebpack\",\n    configFilename: \"electron-webpack\",\n    projectDir: context.projectDir,\n    packageMetadata: context.packageMetadata\n  })\n  const configuration: ElectronWebpackConfiguration = result == null || result.result == null ? {} : result.result\n  if (configuration.staticSourceDirectory == null) {\n    configuration.staticSourceDirectory = \"static\"\n  }\n  if (configuration.commonDistDirectory == null) {\n    configuration.commonDistDirectory = \"dist\"\n  }\n  if (configuration.commonSourceDirectory == null) {\n    configuration.commonSourceDirectory = getDefaultRelativeSystemDependentCommonSource()\n  }\n  configuration.commonDistDirectory = path.resolve(context.projectDir, configuration.commonDistDirectory)\n  configuration.commonSourceDirectory = path.resolve(context.projectDir, configuration.commonSourceDirectory)\n\n  if (configuration.renderer === undefined) {\n    configuration.renderer = {}\n  }\n  if (configuration.main === undefined) {\n    configuration.main = {}\n  }\n\n  if (configuration.projectDir == null) {\n    configuration.projectDir = context.projectDir\n  }\n  return configuration\n}\n"],"sourceRoot":""}
